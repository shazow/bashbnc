#!/bin/bash -e
# An IRC bouncer (BNC) in Bash.

relay() {
    declare in="$1" out="$2" logfile="$3" host="$4" port="${5:-6667}"
    echo "Connecting to IRC server on ${host}:${port}."
    nc "$host" "$port" < "$in"  | logger "[relay] " "$logfile" > "$out"
    echo "Lost connection to IRC server."
}

client() {
    declare in="$1" out="$2" logfile="$3" host="${4:-localhost}" port="${5:-16667}"
    echo "Listening for IRC clients on ${host}:${port}."
    while [ 1 ]; do
        nc -l "$host" "$port" < "$in"

        # Replay log.
        # TODO: Replay only the parts we actually need?
        cat "$logfile" > "$in" &
    done | client_middleware | logger "[client]" > "$out"
}

client_middleware() {
    # Consume messages we don't want to relay.
    local connected=0
    while read line; do
        # Parse commands, look like this: "COMMAND args..."
        local command="$(echo $line | cut -d ' ' -f1)"
        case "$command" in
            "QUIT")
                # Discard QUIT messages, because we're not quitters.
                continue
                ;;
            "NICK" | "USER" | "PASS")
                if [[ $connected -ge 2 ]]; then
                    # Skip logging in again.
                    echo "Skipping welcome: $line" > /dev/stderr
                    continue
                fi
                ((connected=connected+1))
                echo "$line"
                ;;
            *)
                echo "$line"
        esac
    done
}

logger() {
    # Helper for debugging (output to stderr) and replay (logfile)
    declare prefix="$1" logfile="$2"
    while read line; do
        echo "${prefix} ${line}" > /dev/stderr
        if [[ "$logfile" ]]; then
            echo "${line}" >> "$logfile"
        fi
        echo "${line}"
    done
}


##

usage() {
    echo "Single-user IRC bouncer (BNC) for a given IRC_HOST server."
    echo "Usage: ${0} IRC_HOST [IRC_PORT [BNC_HOST [BNC_PORT]]]"
}

main() {
    set -eo pipefail; [[ "$TRACE" ]] && set -x

    declare host="$1" port="${2:-6667}" bnchost="${3:-localhost}" bncport="${4:-16667}"
    if [[ ! "${host}" ]]; then
        usage
        exit 1
    fi

    # Setup temporary workdir for our fifos.
    readonly workdir="$(mktemp -d -t $(basename $0))"

    # Cleanup
    trap 'rm -rf "$workdir"' EXIT
    trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT

    mkfifo "$workdir/in" "$workdir/out"
    client "$workdir/in" "$workdir/out" "$workdir/irc.log" "$bnchost" "$bncport" &
    relay "$workdir/out" "$workdir/in" "$workdir/irc.log" "$host" "$port"
    # TODO: Make sure client loop dies with the relay
    # TODO: Defer opening relay until first client connected?
}

main $@
