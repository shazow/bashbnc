#!/bin/bash -e
# An IRC bouncer (BNC) in Bash.

relay() {
    declare in="$1" out="$2" log="$3" host="$4" port="${5:-6667}"
    echo "Connecting to IRC server on ${host}:${port}."
    nc "$host" "$port" < "$in"  | logger "[relay] " "$log" > "$out"
    echo "Lost connection to IRC server."
}

client() {
    declare in="$1" out="$2" log="$3" host="${4:-localhost}" port="${5:-16667}"
    echo "Listening for IRC clients on ${host}:${port}."
    while [ 1 ]; do
        nc -l "$host" "$port" < "$in"

        # Replay log.
        # TODO: Replay only the parts we actually need.
        cat "$log" > "$in" &
    done | client_middleware | logger "[client]" > "$out"
}

client_middleware() {
    local connected=0
    while read line; do
        local command="$(echo $line | cut -d ' ' -f1)"
        case "$command" in
            "QUIT")
                # Discard QUIT messages, because we're not quitters.
                continue
                ;;
            "NICK")
                if [[ $connected -ge 2 ]]; then
                    # Skip logging in again.
                    echo "Skipping welcome: $line" > /dev/stderr
                    continue
                fi
                ((connected=connected+1))
                echo "$line"
                ;;
            "USER")
                if [[ $connected -ge 2 ]]; then
                    # Skip logging in again.
                    echo "Skipping welcome: $line" > /dev/stderr
                    continue
                fi
                ((connected=connected+1))
                echo "$line"
                ;;
            *)
                echo "$line"
        esac
    done
}

logger() {
    declare prefix="$1" log="$2"
    # Consume some messages, like QUIT
    while read line; do
        echo "${prefix} ${line}" > /dev/stderr
        if [[ "$log" ]]; then
            echo "${line}" >> "$log"
        fi
        echo "${line}"
    done
}


##

usage() {
    echo "IRC bouncer for a given HOST server."
    echo "Usage: ${0} HOST [PORT]"
}

main() {
    set -eo pipefail; [[ "$TRACE" ]] && set -x

    declare host="$1" port="${2:-6667}"
    if [[ ! "${host}" ]]; then
        usage
        exit 1
    fi

    # Setup temporary workdir for our fifos.
    readonly workdir="$(mktemp -d -t $(basename $0))"
    trap 'rm -rf "$workdir"' EXIT

    mkfifo "$workdir/in" "$workdir/out"
    client "$workdir/in" "$workdir/out" "$workdir/irc.log" "localhost" "16667" &
    # TODO: MITM between receive and relay.
    relay "$workdir/out" "$workdir/in" "$workdir/irc.log" "$1" "$2"
}

main $@
